'use strict';

var _must = require('must');

var _must2 = _interopRequireDefault(_must);

var _Actor = require('potoo-lib/Actor');

var _System = require('potoo-lib/System');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tt = function tt(s) {
    return s.tick().tock();
};

var a1 = new _Actor.LocalT({ id: 'a1' });

var a2 = new _Actor.LocalT({ id: 'a2' });

var a3 = new _Actor.LocalT({
    id: 'a3',
    start: function start() {
        return (0, _Actor.spawn)(new _Actor.LocalT({
            id: 'a3a',
            start: function start() {
                return (0, _Actor.receive)(function (m) {
                    debugger;return (0, _Actor.tell)('a4', 'You said : \'' + m + '\'');
                });
            }
        }));
    }
});

new _System.System().spawn(a1).spawn(a2).spawn(a3).tick().tock().chain(function (sys) {

    (0, _must2.default)(sys.actors.a1).be.instanceOf(_Actor.ActorL);
    (0, _must2.default)(sys.actors.a2).be.instanceOf(_Actor.ActorL);
    (0, _must2.default)(sys.actors.a3).be.instanceOf(_Actor.ActorL);
    return sys.tick().tock();
}).chain(function (sys) {

    (0, _must2.default)(sys.actors['a3/a3a']).be.instanceOf(_Actor.ActorL);
    return sys.tick().tock();
}).chain(function (sys) {
    return sys.spawn(new _Actor.LocalT({ id: 'a4', start: function start() {
            return (0, _Actor.tell)('a3/a3a', 'hi');
        } })).tick().tock();
}).chain(function (sys) {

    (0, _must2.default)(sys.actors['a4']).be.instanceOf(_Actor.ActorL);
    return sys.tick().tock();
}).chain(function (sys) {

    (0, _must2.default)(sys.actors['a3/a3a'].mailbox[0]).be('hi');
    return sys.tick().tock();
}).chain(function (sys) {

    console.log(sys.actors.a3.ops);
    (0, _must2.default)(sys.actors['a4'].mailbox[0]).be('You said : \'hi\'');
    return sys;
}).run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odWguanMiXSwibmFtZXMiOlsidHQiLCJzIiwidGljayIsInRvY2siLCJhMSIsImlkIiwiYTIiLCJhMyIsInN0YXJ0IiwibSIsInNwYXduIiwiY2hhaW4iLCJzeXMiLCJhY3RvcnMiLCJiZSIsImluc3RhbmNlT2YiLCJtYWlsYm94IiwiY29uc29sZSIsImxvZyIsIm9wcyIsInJ1biJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBR1EsSUFBSUEsS0FBSyxTQUFMQSxFQUFLO0FBQUEsV0FBS0MsRUFBRUMsSUFBRixHQUFTQyxJQUFULEVBQUw7QUFBQSxDQUFUOztBQUVBLElBQUlDLEtBQUssa0JBQVcsRUFBRUMsSUFBSSxJQUFOLEVBQVgsQ0FBVDs7QUFFQSxJQUFJQyxLQUFLLGtCQUFXLEVBQUVELElBQUksSUFBTixFQUFYLENBQVQ7O0FBRUEsSUFBSUUsS0FBSyxrQkFBVztBQUNoQkYsUUFBSSxJQURZO0FBRWhCRyxXQUFPO0FBQUEsZUFBTSxrQkFBTSxrQkFBVztBQUMxQkgsZ0JBQUksS0FEc0I7QUFFMUJHLG1CQUFPO0FBQUEsdUJBQU0sb0JBQVEsYUFBSztBQUFFLDZCQUFVLE9BQU8saUJBQUssSUFBTCxvQkFBMEJDLENBQTFCLFFBQVA7QUFBd0MsaUJBQWpFLENBQU47QUFBQTtBQUZtQixTQUFYLENBQU4sQ0FBTjtBQUFBO0FBRlMsQ0FBWCxDQUFUOztBQVFBLHFCQUNLQyxLQURMLENBQ1dOLEVBRFgsRUFFS00sS0FGTCxDQUVXSixFQUZYLEVBR0tJLEtBSEwsQ0FHV0gsRUFIWCxFQUlLTCxJQUpMLEdBS0tDLElBTEwsR0FNS1EsS0FOTCxDQU1XLGVBQU87O0FBRVYsd0JBQUtDLElBQUlDLE1BQUosQ0FBV1QsRUFBaEIsRUFBb0JVLEVBQXBCLENBQXVCQyxVQUF2QjtBQUNBLHdCQUFLSCxJQUFJQyxNQUFKLENBQVdQLEVBQWhCLEVBQW9CUSxFQUFwQixDQUF1QkMsVUFBdkI7QUFDQSx3QkFBS0gsSUFBSUMsTUFBSixDQUFXTixFQUFoQixFQUFvQk8sRUFBcEIsQ0FBdUJDLFVBQXZCO0FBQ0EsV0FBT0gsSUFBSVYsSUFBSixHQUFXQyxJQUFYLEVBQVA7QUFFSCxDQWJMLEVBY0tRLEtBZEwsQ0FjVyxlQUFPOztBQUVWLHdCQUFLQyxJQUFJQyxNQUFKLENBQVcsUUFBWCxDQUFMLEVBQTJCQyxFQUEzQixDQUE4QkMsVUFBOUI7QUFDQSxXQUFPSCxJQUFJVixJQUFKLEdBQVdDLElBQVgsRUFBUDtBQUVILENBbkJMLEVBb0JLUSxLQXBCTCxDQW9CVztBQUFBLFdBQ0hDLElBQ0NGLEtBREQsQ0FDTyxrQkFBVyxFQUFFTCxJQUFJLElBQU4sRUFBWUcsT0FBTztBQUFBLG1CQUFNLGlCQUFLLFFBQUwsRUFBZSxJQUFmLENBQU47QUFBQSxTQUFuQixFQUFYLENBRFAsRUFFQ04sSUFGRCxHQUdDQyxJQUhELEVBREc7QUFBQSxDQXBCWCxFQXlCS1EsS0F6QkwsQ0F5QlcsZUFBTzs7QUFFVix3QkFBS0MsSUFBSUMsTUFBSixDQUFXLElBQVgsQ0FBTCxFQUF1QkMsRUFBdkIsQ0FBMEJDLFVBQTFCO0FBQ0EsV0FBT0gsSUFBSVYsSUFBSixHQUFXQyxJQUFYLEVBQVA7QUFFSCxDQTlCTCxFQStCS1EsS0EvQkwsQ0ErQlcsZUFBTzs7QUFFVix3QkFBS0MsSUFBSUMsTUFBSixDQUFXLFFBQVgsRUFBcUJHLE9BQXJCLENBQTZCLENBQTdCLENBQUwsRUFBc0NGLEVBQXRDLENBQXlDLElBQXpDO0FBQ0EsV0FBT0YsSUFBSVYsSUFBSixHQUFXQyxJQUFYLEVBQVA7QUFFSCxDQXBDTCxFQXFDS1EsS0FyQ0wsQ0FxQ1csZUFBTzs7QUFFVk0sWUFBUUMsR0FBUixDQUFZTixJQUFJQyxNQUFKLENBQVdOLEVBQVgsQ0FBY1ksR0FBMUI7QUFDQSx3QkFBS1AsSUFBSUMsTUFBSixDQUFXLElBQVgsRUFBaUJHLE9BQWpCLENBQXlCLENBQXpCLENBQUwsRUFBa0NGLEVBQWxDLENBQXFDLG1CQUFyQztBQUNBLFdBQU9GLEdBQVA7QUFFSCxDQTNDTCxFQTRDS1EsR0E1Q0wiLCJmaWxlIjoiaHVoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG11c3QgZnJvbSAnbXVzdCc7XG5pbXBvcnQgeyBMb2NhbFQsIEFjdG9yTCwgc3Bhd24sIHRlbGwsIHJlY2VpdmUgfSBmcm9tICdwb3Rvby1saWIvQWN0b3InO1xuaW1wb3J0IHsgU3lzdGVtIH0gZnJvbSAncG90b28tbGliL1N5c3RlbSc7XG5cblxuICAgICAgICBsZXQgdHQgPSBzID0+IHMudGljaygpLnRvY2soKTtcblxuICAgICAgICBsZXQgYTEgPSBuZXcgTG9jYWxUKHsgaWQ6ICdhMScgfSk7XG5cbiAgICAgICAgbGV0IGEyID0gbmV3IExvY2FsVCh7IGlkOiAnYTInIH0pO1xuXG4gICAgICAgIGxldCBhMyA9IG5ldyBMb2NhbFQoe1xuICAgICAgICAgICAgaWQ6ICdhMycsXG4gICAgICAgICAgICBzdGFydDogKCkgPT4gc3Bhd24obmV3IExvY2FsVCh7XG4gICAgICAgICAgICAgICAgaWQ6ICdhM2EnLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiAoKSA9PiByZWNlaXZlKG0gPT4geyBkZWJ1Z2dlcjsgcmV0dXJuIHRlbGwoJ2E0JywgYFlvdSBzYWlkIDogJyR7bX0nYCkgfSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU3lzdGVtKClcbiAgICAgICAgICAgIC5zcGF3bihhMSlcbiAgICAgICAgICAgIC5zcGF3bihhMilcbiAgICAgICAgICAgIC5zcGF3bihhMylcbiAgICAgICAgICAgIC50aWNrKClcbiAgICAgICAgICAgIC50b2NrKClcbiAgICAgICAgICAgIC5jaGFpbihzeXMgPT4ge1xuXG4gICAgICAgICAgICAgICAgbXVzdChzeXMuYWN0b3JzLmExKS5iZS5pbnN0YW5jZU9mKEFjdG9yTCk7XG4gICAgICAgICAgICAgICAgbXVzdChzeXMuYWN0b3JzLmEyKS5iZS5pbnN0YW5jZU9mKEFjdG9yTCk7XG4gICAgICAgICAgICAgICAgbXVzdChzeXMuYWN0b3JzLmEzKS5iZS5pbnN0YW5jZU9mKEFjdG9yTCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5cy50aWNrKCkudG9jaygpO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNoYWluKHN5cyA9PiB7XG5cbiAgICAgICAgICAgICAgICBtdXN0KHN5cy5hY3RvcnNbJ2EzL2EzYSddKS5iZS5pbnN0YW5jZU9mKEFjdG9yTCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5cy50aWNrKCkudG9jaygpO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNoYWluKHN5cyA9PlxuICAgICAgICAgICAgICAgIHN5c1xuICAgICAgICAgICAgICAgIC5zcGF3bihuZXcgTG9jYWxUKHsgaWQ6ICdhNCcsIHN0YXJ0OiAoKSA9PiB0ZWxsKCdhMy9hM2EnLCAnaGknKSB9KSlcbiAgICAgICAgICAgICAgICAudGljaygpXG4gICAgICAgICAgICAgICAgLnRvY2soKSlcbiAgICAgICAgICAgIC5jaGFpbihzeXMgPT4ge1xuXG4gICAgICAgICAgICAgICAgbXVzdChzeXMuYWN0b3JzWydhNCddKS5iZS5pbnN0YW5jZU9mKEFjdG9yTCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5cy50aWNrKCkudG9jaygpO1xuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNoYWluKHN5cyA9PiB7XG5cbiAgICAgICAgICAgICAgICBtdXN0KHN5cy5hY3RvcnNbJ2EzL2EzYSddLm1haWxib3hbMF0pLmJlKCdoaScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzeXMudGljaygpLnRvY2soKTtcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jaGFpbihzeXMgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3lzLmFjdG9ycy5hMy5vcHMpO1xuICAgICAgICAgICAgICAgIG11c3Qoc3lzLmFjdG9yc1snYTQnXS5tYWlsYm94WzBdKS5iZSgnWW91IHNhaWQgOiBcXCdoaVxcJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzeXM7XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAucnVuKCk7XG5cblxuIl19