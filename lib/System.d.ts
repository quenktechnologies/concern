import { Context } from './Context';
import { Template } from './Template';
import { Message } from './Message';
export declare const INFO = 6;
export declare const WARN = 5;
export declare const ERROR = 1;
/**
 * makeChildPath creates a child path given an actor and a child id
 */
export declare const makeChildPath: (id: string, parent: string) => string;
/**
 * ASEvent is the superclass of all events generated by
 * the system.
 */
export declare class ASEvent {
}
/**
 * Logger is an interface for intercepting events generated
 * by the actor system.
 */
export interface Logger {
    info(e: ASEvent): any;
    warn(e: ASEvent): any;
    error(e: ASEvent): any;
}
/**
 * ChildSpawnedEvent
 */
export declare class ChildSpawnedEvent extends ASEvent {
    address: string;
    constructor(address: string);
}
/**
 * MessageSentEvent
 */
export declare class MessageSentEvent<M> extends ASEvent {
    to: string;
    from: string;
    message: M;
    constructor(to: string, from: string, message: M);
}
/**
 * MessageDroppedEvent
 */
export declare class MessageDroppedEvent<M> extends MessageSentEvent<M> {
}
/**
 * MessageReceivedEvent
 */
export declare class MessageReceivedEvent<M> extends MessageSentEvent<M> {
}
/**
 * ReceiveStartedEvent
 */
export declare class ReceiveStartedEvent extends ASEvent {
    path: string;
    constructor(path: string);
}
export interface Configuration {
    log: LoggingPolicy;
}
export interface LoggingPolicy {
    level: number;
    logger: Logger;
}
/**
 * LoggingLogic contains the logic for system logging.
 */
export declare class LoggingLogic {
    policy: LoggingPolicy;
    constructor(policy: LoggingPolicy);
    static createFrom(p: LoggingPolicy): LoggingLogic;
    /**
     * childSpawned
     */
    childSpawned(ref: string): void;
    /**
     * messageDropped
     */
    messageDropped<M>(m: Message<M>): void;
    /**
     * messageSent
     */
    messageSent<M>(m: Message<M>): void;
    /**
     * messageReceived
     */
    messageReceived<M>(m: Message<M>): void;
    /**
     * receiveStarted
     */
    receiveStarted(path: string): void;
}
/**
 * System is a system of actors.
 */
export declare class System {
    config: Configuration;
    actors: object;
    logging: LoggingLogic;
    path: string;
    constructor(config?: Configuration, actors?: object, logging?: LoggingLogic, path?: string);
    /**
     * create a new system
     */
    static create(c?: Configuration): System;
    /**
     * spawn a new top level actor within the system.
     */
    spawn(t: Template): System;
    /**
     * putChild creates a new child actor for a parent within the system.
     */
    putChild(t: Template, parent: string): string;
    /**
     * dropMessage drops a message.
     */
    dropMessage<M>(m: Message<M>): void;
    /**
     * putContext replaces an actor's context within the system.
     */
    putContext(path: string, context: Context): void;
    /**
     * putMessage places a message into an actor's context.
     *
     * Messages are enveloped to help the system keep track of
     * communication. The message may be processed or stored
     * depending on the target actor's state at the time.
     * If the target actor does not exist, the message is dropped.
     */
    putMessage<M>(to: string, from: string, message: M): void;
    /**
     * askMessage allows an actor to ignore incomming messages unless
     * they have been sent by a specific actor.
     */
    askMessage<M>(to: string, from: string, m: M): any;
}
