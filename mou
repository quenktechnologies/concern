
  - exec exec :: (Actor, IO<System>, Free<Self,null>) →  IO<System>
  - exec exec :: (Actor, IO<System>, Free<Get,null>) →  IO<System>
  - exec exec :: (Actor, IO<System>, Free<Put,null>) →  IO<System>
  - exec exec :: (Actor, IO<System>, Free<Update,null>) →  IO<System>
  - exec exec :: (Actor, IO<System>, Free<Input,null>) →  IO<System>
    exec exec :: (Actor, IO<System>, Free<Spawn, null>: expanse  Suspend {
  ftor: 
   Log {
     next: Suspend { ftor: [Object] },
     op: Spawn { next: [Object], template: [Object], map: [Function] },
     map: [Function] } } 



expanse  Suspend {
  ftor: 
   Output {
     next: Return { value: [Object] },
     f: [Function],
     map: [Function] } } 



u Return {
  value: 
   Suspend {
     ftor: Output { next: [Object], f: [Function], map: [Function] } } }
expanse  Return {
  value: 
   Suspend {
     ftor: Output { next: [Object], f: [Function], map: [Function] } } } 



Spawn {
  next: Return { value: undefined },
  template: LocalT { id: 'ray', start: [Function] },
  map: [Function] }
more news @ 10
  1) exec exec :: (Actor, IO<System>, Free<Spawn, null>

  0 passing (64ms)
  5 pending
  1 failing

  1) exec exec :: (Actor, IO<System>, Free<Spawn, null>:
     AssertionError: undefined must be an instance of Actor
      at test/unit/Exec_test.js:138:28
      at IO.f (../src/monad.js:447:29)
      at IO.run (../src/monad.js:464:9)
      at Context.<anonymous> (test/unit/Exec_test.js:141:14)



